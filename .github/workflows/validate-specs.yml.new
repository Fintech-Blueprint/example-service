name: Validate Specifications

on:
  pull_request:
    paths:
      - 'specs/**'
      - '**/*.feature'
      - 'requirements/**'

jobs:
  validate-specs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install behave gherkin-lint pyyaml jsonschema

      - name: Validate BDD syntax
        run: |
          for file in $(find . -name "*.feature"); do
            echo "Validating $file..."
            behave --dry-run "$file" || true
          done

      - name: Check spec coverage
        run: |
          python3 - <<'PY'
          import os
          import json
          from pathlib import Path

          def analyze_spec_coverage():
              issues = []
              total_scenarios = 0
              implemented = 0

              for feature_file in Path('.').rglob('*.feature'):
                  with open(feature_file) as f:
                      content = f.read()
                      scenarios = content.count('Scenario:')
                      total_scenarios += scenarios

                      lines = content.splitlines()
                      for i, line in enumerate(lines, 1):
                          if line.strip().startswith('Scenario:'):
                              has_given = False
                              has_when = False
                              has_then = False
                              for step in lines[i:i+10]:
                                  if step.strip().startswith('Given '):
                                      has_given = True
                                  elif step.strip().startswith('When '):
                                      has_when = True
                                  elif step.strip().startswith('Then '):
                                      has_then = True
                              if not (has_given and has_when and has_then):
                                  issues.append({'file': str(feature_file), 'line': i, 'issue': 'Incomplete scenario steps'})
                              else:
                                  implemented += 1

              report = {
                  'spec_coverage': round((implemented / total_scenarios * 100) if total_scenarios > 0 else 0, 2),
                  'total_scenarios': total_scenarios,
                  'implemented_scenarios': implemented,
                  'errors': issues
              }

              os.makedirs('reports', exist_ok=True)
              with open('reports/spec-coverage.json', 'w') as f:
                  json.dump(report, f, indent=2)

              if issues:
                  print('❌ Specification validation failed!')
                  print(f'Found {len(issues)} issues:')
                  for issue in issues:
                      print(f"- {issue['file']}:{issue['line']} - {issue['issue']}")
                  with open('reports/spec-validation-failed','w') as m:
                      m.write('failed')
                  raise SystemExit(1)
              else:
                  print('✅ All specifications are valid!')
                  print(f"Coverage: {report['spec_coverage']}%")
                  print(f"Total scenarios: {total_scenarios}")
                  print(f"Implemented: {implemented}")

          if __name__ == '__main__':
              analyze_spec_coverage()
          PY

      - name: Upload spec coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spec-coverage-report
          path: reports/spec-coverage.json
      - name: Print audit-response.json
        run: |
          if [ -f ./audit-response.json ]; then
            echo "===== audit-response.json ====="
            cat ./audit-response.json
          else
            echo "audit-response.json missing"
          fi
        if: always()
      - name: Print working directory & file listing
        run: |
          pwd
          ls -la
        if: always()

      - name: Print spec coverage report
        if: always()
        run: |
          if [ -f reports/spec-coverage.json ]; then
            echo "===== spec-coverage.json ====="
            cat reports/spec-coverage.json
          else
            echo "spec-coverage.json missing"
          fi

      - name: Print working directory & file listing
        if: always()
        run: |
          echo "===== Current directory ====="
          pwd
          echo "===== Files ====="
          ls -la

      - name: Upload validation marker
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spec-validation-marker
          path: reports/spec-validation-failed

      - name: Upload spec coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spec-coverage-report
          path: reports/spec-coverage.json

      - name: Print spec coverage report
        if: always()
        run: |
          if [ -f reports/spec-coverage.json ]; then
            echo "===== spec-coverage.json ====="
            cat reports/spec-coverage.json
          else
            echo "spec-coverage.json missing"
          fi