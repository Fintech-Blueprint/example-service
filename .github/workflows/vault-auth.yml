---
# IMPORTANT:
# - Always start file with '---'
# - Use explicit lists for branches/tags, never inline truthy
# - Split run: commands >80 chars into block scalars
# - Max line length: 80
# - Use consistent variable names from global spec
name: Vault Auth
on:
  workflow_call:
    outputs:
      vault-token:
        description: "Vault token for authenticated session"
        value: ${{ jobs.vault-auth.outputs.vault-token }}
      token-ttl:
        description: "Remaining TTL of the token in seconds"
        value: ${{ jobs.vault-auth.outputs.token-ttl }}
  workflow_dispatch: {}
permissions:
  id-token: write
  contents: read
jobs:
  vault-auth:
    name: Authenticate with Vault
    runs-on: ubuntu-latest
    outputs:
      vault-token: ${{ steps.validate-token.outputs.validated_token }}
      token-ttl: ${{ steps.validate-token.outputs.token_ttl }}
    strategy:
      matrix:
        vault-role: ["github-actions"]
    steps:
      - uses: actions/checkout@v4
      - name: Log authentication attempt
        run: >
          echo "Start time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Vault role: ${{ matrix.vault-role }}"
          echo "VAULT_ADDR: ${{ secrets.VAULT_ADDR }}"
      - name: Authenticate to Vault via OIDC
        id: vault-login
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: jwt
          jwtGithubAudience: "https://github.com/Fintech-Blueprint"
          role: ${{ matrix.vault-role }}
          exportToken: true
      - name: Export Vault token
        run: >
          echo "VAULT_TOKEN=${{ steps.vault-login.outputs.client_token }}" \
            >> $GITHUB_ENV
      - name: Validate Vault Token
        id: validate-token
        run: >
          TOKEN_INFO=$(curl -s -H "X-Vault-Token: ${{ steps.vault-login.outputs.client_token }}" \
            ${{ secrets.VAULT_ADDR }}/v1/auth/token/lookup-self)
          TTL=$(echo $TOKEN_INFO | jq -r '.data.ttl')
          POLICIES=$(echo $TOKEN_INFO | jq -r '.data.policies[]')
          if ! echo "$POLICIES" | grep -q "${{ matrix.vault-role }}"; then
            echo "Error: Token missing required ${{ matrix.vault-role }} policy" \
              && exit 1
          fi
          if [ "$TTL" -le 0 ]; then
            echo "Token expired, failing fast" && exit 1
          fi
          echo "validated_token=${{ steps.vault-login.outputs.client_token }}" \
            >> $GITHUB_OUTPUT
          echo "token_ttl=$TTL" >> $GITHUB_OUTPUT
          echo "Token validated successfully with TTL: $TTL seconds"
      - name: Log completion
        if: always()
        run: >
          echo "Authentication completed"
          echo "End time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Token TTL: ${{ steps.validate-token.outputs.token_ttl }} seconds"
      - name: Test Vault Access
        if: github.event_name == 'workflow_dispatch'
        run: >
          vault read -format=json secret/data/test/version \
            | jq -r '.data.data.version'
