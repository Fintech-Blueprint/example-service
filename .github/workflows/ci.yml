name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      compliance_status: ${{ steps.compliance_check.outputs.status }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest pytest-cov
    
    - name: Run lint
      run: make lint
    
    - name: Run tests with coverage
      run: make test
    
    - name: Validate specs in compliance mode
      id: compliance_check
      run: |
        VALIDATION_MODE=compliance python3 scripts/validate_specs.py
        status=$(jq -r '.status' reports/*/compliance-status.json)
        echo "status=$status" >> "$GITHUB_OUTPUT"
    
    - name: Generate and sign SBOM
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        syft . -o cyclonedx-json > reports/sbom.json
        cosign sign-blob --key env://COSIGN_PRIVATE_KEY reports/sbom.json > reports/sbom.json.sig
      env:
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
    
    - name: Archive reports
      uses: actions/upload-artifact@v3
      with:
        name: compliance-reports
        path: |
          reports/*/
          !reports/archive/

  stage:
    needs: validate
    if: needs.validate.outputs.compliance_status != 'fail'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha,prefix=service:
          type=semver,pattern=service:{{version}}
    
    - name: Build and push image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Sign container image
      env:
        DIGEST: ${{ steps.build.outputs.digest }}
      run: |
        cosign sign --key env://COSIGN_PRIVATE_KEY "${REGISTRY}/${IMAGE_NAME}@${DIGEST}"
      env:
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
    
    - name: Scan image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:service:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'
    
    - name: Deploy to staging
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: service-account
        k8s-url: ${{ secrets.KUBE_URL }}
        k8s-secret: ${{ secrets.KUBE_SA_SECRET }}
    
    - name: Deploy
      env:
        STAGING_URL: ${{ secrets.STAGING_URL }}
        IMAGE_TAG: service:${{ github.sha }}
      run: |
        # Replace image tag in Kubernetes manifests
        sed -i "s|image:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}|" deploy/staging/*.yaml
        kubectl apply -f deploy/staging/
    
    - name: Run smoke tests
      run: |
        # Wait for deployment
        kubectl rollout status deployment/example-service -n staging --timeout=300s
        
        # Run smoke tests (excluding broken_ping.feature)
        STAGING_URL=${{ secrets.STAGING_URL }} pytest tests/smoke/test_ping.py --junit-xml=smoke-test-results.xml
      timeout-minutes: 5
    
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: smoke-test-results
        path: smoke-test-results.xml

  cleanup:
    needs: [validate, stage]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Cleanup old reports
      run: |
        # Keep only last 20 reports in archive
        ls -t reports/archive/ | tail -n +21 | xargs -I {} rm -rf reports/archive/{}