---
name: CI Pipeline

"on":
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  MODE: ${{ vars.MODE || 'sandbox' }}

permissions:
  contents: write
  actions: write
  id-token: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Gather artifacts for audit
        run: >-
          mkdir -p audit-uploads || true;
          if [ -d generated-artifacts ]; then
            cp -r generated-artifacts reports || true;
          fi

      - name: Debug OIDC Token Claims
        uses: actions/github-script@v7
        with:
          script: |
            core.startGroup('OIDC Token Debug Info');
            const token = await core.getIDToken('https://github.com/Fintech-Blueprint');
            console.log('Token received. Decoding claims...');
            const [header, claims, signature] = token.split('.');
            const decodedClaims = JSON.parse(Buffer.from(claims, 'base64').toString());
            
            // Log full claims for debugging
            console.log('Full Claims:', JSON.stringify(decodedClaims, null, 2));
            
            // Extract subject for Vault configuration
            console.log('\nImportant fields for Vault configuration:');
            console.log('subject:', decodedClaims.sub);
            console.log('aud:', decodedClaims.aud);
            console.log('repository:', decodedClaims.repository);
            console.log('ref:', decodedClaims.ref);
            
            core.endGroup();
            
            // Save claims for later steps
            core.saveState('token_sub', decodedClaims.sub);
            core.setOutput('token_sub', decodedClaims.sub);

      - name: Vault OIDC Login
        id: vault
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: jwt
          namespace: admin
          role: github-actions
          jwtGithubAudience: vault
          secrets: |
            secret/data/ci/org_gh_token org_gh_token

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run linting
        run: |
          pip install flake8
          flake8 src tests

  test:
    name: Test (pytest)
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt || true
          fi
          pip install pytest

      - name: Run pytest and save results
        run: >-
          set -o pipefail;
          PYTHONPATH=$PWD pytest --maxfail=1 --disable-warnings -q \
            --junitxml=pytest-results.xml 2>&1 | tee pytest.log || rc=$?;
          rc=${rc:-0};
          if [ "${{ env.MODE }}" = "compliance" ] && [ "$rc" != "0" ]; then
            echo "Tests failed in compliance mode (rc=$rc)" >&2;
            exit $rc;
          fi

      - name: Upload pytest artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: |
            pytest-results.xml
            pytest.log

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image and save logs
        run: >-
          set -o pipefail;
          docker build -t example-service:${{ github.sha }} . 2>&1 | \
            tee docker.log || rc=$?;
          rc=${rc:-0};
          if [ "${{ env.MODE }}" = "compliance" ] && [ "$rc" != "0" ]; then
            echo "Docker build failed in compliance mode" >&2;
            exit $rc;
          fi;
          if docker images --format '{{.Repository}}:{{.Tag}}' | \
             grep -q "example-service:${{ github.sha }}"; then
            docker save example-service:${{ github.sha }} \
              -o example-service-${{ github.sha }}.tar || true;
          fi

      - name: Upload docker artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-artifacts
          path: |
            docker.log
            example-service-${{ github.sha }}.tar

  sbom-sign:
    name: Generate SBOM & Sign
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate CycloneDX SBOM
        run: |
          pip install cyclonedx-bom || true
          cyclonedx-py -o sbom.xml || true

      - name: Sign image (cosign placeholder)
        run: echo "placeholder for cosign signing"

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.xml

  sast:
    name: SAST (CodeQL)
    runs-on: ubuntu-latest
    needs: [sbom-sign]
    continue-on-error: ${{ vars.MODE == 'sandbox' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  audit:
    name: Trigger Audit Trail
    runs-on: ubuntu-latest
    needs: [sast]
    steps:
      - name: Gather artifacts for audit
        run: >-
          mkdir -p audit-uploads || true;
          if [ -d generated-artifacts ]; then
            cp -r generated-artifacts reports || true;
          fi

      - name: Vault OIDC Login
        id: vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: jwt
          namespace: admin
          role: github-actions
          jwtGithubAudience: vault
          secrets: |
            secret/data/ci/org_gh_token org_gh_token

      - name: Upload audit response
        uses: actions/upload-artifact@v4
        with:
          name: audit-response
          path: audit_response.json

  enforce-compliance:
    name: Enforce Compliance
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
      - docker-build
      - sbom-sign
      - sast
    if: ${{ vars.MODE == 'compliance' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download generation artifacts
        uses: actions/download-artifact@v4
        with:
          name: generation-reports
          path: ./generated

      - name: Run auditor
        run: >-
          set -o pipefail;
          python3 scripts/audit_compliance.py \
            --mode compliance \
            --pr-number "${{ github.event.pull_request.number || 'manual' }}" \
          name: generation-reports
            --commit-sha "${{ github.sha }}" \
            --output ./audit-response.json \
            --spec-report ./generated/spec-coverage.json \
            --generated-files ./generated/generated_files.json || true

      - name: Show audit-response.json
        if: always()
        run: >-
          if [ -f ./audit-response.json ]; then
            echo "==== audit-response.json ====";
            cat ./audit-response.json;
            jq -r '"Validator Exit Code: \(.validator_exit_code)
              Auditor Exit Code: \(.auditor_exit_code)"' \
              ./audit-response.json 2>/dev/null || true;
            echo "============================";
          else
            echo "No audit-response.json found";
          fi

      - name: Upload compliance artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: enforce-compliance-artifacts
          path: |
            audit-response.json
            pytest-results.xml
            flake8.log
            docker.log
            sbom.xml
