name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MODE: ${{ vars.MODE || 'sandbox' }}

permissions:
  contents: write
  actions: write
  id-token: write

jobs:
    steps:
      - name: Gather artifacts for audit
        run: |
          mkdir -p audit-uploads || true
          if [ -d generated-artifacts ]; then
            cp -r generated-artifacts reports || true
          fi

      - name: Vault OIDC Login
        id: vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: oidc
          role: github-actions
          secrets: |
            secret/data/ci/org_gh_token org_gh_token

      - name: Trigger audit-trail workflow via repository dispatch
        env:
          GITHUB_TOKEN: ${{ env.org_gh_token }}
        run: |
          set -e
          curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type":"trigger-audit","client_payload":{"source_workflow":"ci.yml","sha":"'"${{ github.sha }}"'"}}' \
            | tee audit_response.json || true
          name: flake8.log
          path: flake8.log
      - name: Print audit-response.json
        if: always()
        run: |
          if [ -f ./audit-response.json ]; then
            echo "===== audit-response.json ====="
            cat ./audit-response.json
          else
            echo "audit-response.json missing"
          fi
      - name: Print working directory & file listing
        if: always()
        run: |
          pwd
          ls -la
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - run: pip install flake8
      - run: flake8 src tests

  test:
    name: Test (pytest)
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
<<<<<<< HEAD
          python-version: '3.11'

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
          pip install pytest

      - name: Run pytest and save results
        run: |
          set -o pipefail
          pytest --maxfail=1 --disable-warnings -q --junitxml=pytest-results.xml 2>&1 | tee pytest.log || rc=$?
          rc=${rc:-0}
          if [ "${{ env.MODE }}" = "compliance" ] && [ "$rc" != "0" ]; then
            echo "Tests failed in compliance mode (rc=$rc)" >&2
            exit $rc
          fi

      - name: Upload pytest artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: |
            pytest-results.xml
            pytest.log
      - name: Print audit-response.json
        if: always()
        run: |
          if [ -f ./audit-response.json ]; then
            echo "===== audit-response.json ====="
            cat ./audit-response.json
          else
            echo "audit-response.json missing"
          fi
      - name: Print working directory & file listing
        if: always()
        run: |
          pwd
          ls -la
=======
          python-version: "3.11"
      - run: pip install -r requirements.txt
      - name: Run tests
        run: |
          PYTHONPATH=$PWD pytest --maxfail=1 --disable-warnings -q

  sast:
  # The SAST job is defined later with the full CodeQL init/autobuild/analyze steps.
>>>>>>> 783a28a43a895f86a4febd45dac094bd27568edc

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
<<<<<<< HEAD
    needs: [test]
=======
    needs: [lint, test]  # Remove sast from needs since it's optional
>>>>>>> 783a28a43a895f86a4febd45dac094bd27568edc
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image and save logs
        run: |
          set -o pipefail
          docker build -t example-service:${{ github.sha }} . 2>&1 | tee docker.log || rc=$?
          rc=${rc:-0}
          if [ "${{ env.MODE }}" = "compliance" ] && [ "$rc" != "0" ]; then
            echo "Docker build failed in compliance mode" >&2
            exit $rc
          fi
          if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "example-service:${{ github.sha }}"; then
            docker save example-service:${{ github.sha }} -o example-service-${{ github.sha }}.tar || true
          fi

      - name: Upload docker artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-artifacts
          path: |
            docker.log
            example-service-${{ github.sha }}.tar
      - name: Print audit-response.json
        if: always()
        run: |
          if [ -f ./audit-response.json ]; then
            echo "===== audit-response.json ====="
            cat ./audit-response.json
          else
            echo "audit-response.json missing"
          fi
      - name: Print working directory & file listing
        if: always()
        run: |
          pwd
          ls -la

  sbom-sign:
    name: Generate SBOM & Sign
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
<<<<<<< HEAD
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate CycloneDX SBOM
        run: |
          pip install cyclonedx-bom || true
          cyclonedx-py -o sbom.xml || true

      - name: Sign image (cosign placeholder)
        run: echo "placeholder for cosign signing"

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.xml
      - name: Print audit-response.json
        if: always()
        run: |
          if [ -f ./audit-response.json ]; then
            echo "===== audit-response.json ====="
            cat ./audit-response.json
          else
            echo "audit-response.json missing"
          fi
      - name: Print working directory & file listing
        if: always()
        run: |
          pwd
          ls -la

  sast:
    name: SAST (CodeQL)
    runs-on: ubuntu-latest
    needs: [sbom-sign]
    continue-on-error: ${{ vars.MODE == 'sandbox' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Analyze
        uses: github/codeql-action/analyze@v2
      - name: Print audit-response.json
        if: always()
        run: |
          if [ -f ./audit-response.json ]; then
            echo "===== audit-response.json ====="
            cat ./audit-response.json
          else
            echo "audit-response.json missing"
          fi
      - name: Print working directory & file listing
        if: always()
        run: |
          pwd
          ls -la

  audit:
    name: Trigger Audit Trail
    runs-on: ubuntu-latest
    needs: [sast]
    steps:
      - name: Gather artifacts for audit
        run: |
          mkdir -p audit-uploads || true
          if [ -d generated-artifacts ]; then
            cp -r generated-artifacts reports || true
          fi

      - name: Vault OIDC Login
        id: vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: oidc
          role: github-actions
          secrets: |
            secret/data/ci/org_gh_token org_gh_token

      - name: Trigger audit-trail workflow via repository dispatch
        env:
<<<<<<< HEAD
          GITHUB_TOKEN: $ORG_GH_TOKEN
=======
          GITHUB_TOKEN: ${{ env.org_gh_token }}
>>>>>>> 01b1579 (chore(vault): integrate Vault OIDC for GitHub Actions secrets)
        run: |
          set -e
          curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type":"trigger-audit","client_payload":{"source_workflow":"ci.yml","sha":"'"${{ github.sha }}"'"}}' \
            | tee audit_response.json || true

      - name: Upload audit response
        uses: actions/upload-artifact@v4
        with:
          name: audit-response
          path: audit_response.json
      - name: Print audit-response.json
        if: always()
        run: |
          if [ -f ./audit-response.json ]; then
            echo "===== audit-response.json ====="
            cat ./audit-response.json
          else
            echo "audit-response.json missing"
          fi
      - name: Print working directory & file listing
        if: always()
        run: |
          pwd
          ls -la

  enforce-compliance:
    name: Enforce Compliance
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build, sbom-sign, sast]
    env:
      MODE: ${{ ((github.event_name == 'pull_request' && startsWith(github.head_ref, 'auto/spec-implementation')) || startsWith(github.ref, 'refs/heads/auto/spec-implementation')) && 'compliance' || vars.MODE || 'sandbox' }}
    if: ${{ vars.MODE == 'compliance' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download generation artifacts
        uses: actions/download-artifact@v3
        with:
          name: generation-reports
          path: ./generated

      - name: Run auditor (produces audit-response.json)
        run: |
          set -o pipefail
          python3 scripts/audit_compliance.py \
            --mode compliance \
            --pr-number "${{ github.event.pull_request.number || 'manual' }}" \
            --pr-author "${{ github.event.pull_request.user.login || github.actor }}" \
            --commit-sha "${{ github.sha }}" \
            --output ./audit-response.json \
            --spec-report ./generated/spec-coverage.json \
            --generated-files ./generated/generated_files.json || true

      - name: Show audit-response.json
        if: always()
        run: |
          if [ -f ./audit-response.json ]; then
            echo "==== audit-response.json ===="
            cat ./audit-response.json
            jq -r '"Validator Exit Code: \(.validator_exit_code)\nAuditor Exit Code: \(.auditor_exit_code)"' ./audit-response.json 2>/dev/null || true
            echo "============================"
          else
            echo "No audit-response.json found"
          fi

      - name: Print working directory & file listing
        if: always()
        run: |
          echo "===== Current directory ====="
          pwd
          echo "===== Files ====="
          ls -la

      - name: Upload audit-response.json and logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: enforce-compliance-artifacts
          path: |
            audit-response.json
            pytest-results.xml
            flake8.log
            docker.log
            sbom.xml
      - name: Print audit-response.json
        if: always()
        run: |
          if [ -f ./audit-response.json ]; then
            echo "===== audit-response.json ====="
            cat ./audit-response.json
          else
            echo "audit-response.json missing"
          fi
      - name: Print working directory & file listing
        if: always()
        run: |
          pwd
          ls -la
=======
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Generate SBOM
        run: |
          pip install cyclonedx-bom
          # Generate SBOM using correct command syntax (no -r flag)
          cyclonedx-py requirements requirements.txt -o sbom.xml

      - name: Sign image (cosign)
        run: |
          echo "placeholder for cosign signing"
          # Placeholder: after docker build, update staging-env manifest (to be implemented)
>>>>>>> 783a28a43a895f86a4febd45dac094bd27568edc
