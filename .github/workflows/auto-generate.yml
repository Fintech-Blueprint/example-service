name: Auto-Generate Code from Specs

on:
  workflow_run:
    workflows: ["Validate Specifications"]
    types:
      - completed

jobs:
  generate-code:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
            - uses: actions/setup-python@v4
                with:
                    python-version: '3.11'

            - name: Install generator dependencies
                run: |
                    pip install jinja2

            - name: Download spec coverage report
                uses: actions/download-artifact@v3
                with:
                    name: spec-coverage-report
                    path: reports

            - name: Run hardened generator
                run: |
                    python scripts/generate_from_spec.py

            - name: Run resource estimator and upload
                run: |
                    python scripts/resource_estimator.py
        
            name: Auto-Generate Code from Specs

            on:
                workflow_run:
                    workflows: ["Validate Specifications"]
                    types: [completed]

            jobs:
                generate-code:
                    if: ${{ github.event.workflow_run.conclusion == 'success' }}
                    runs-on: ubuntu-latest
                    steps:
                        - name: Checkout
                            uses: actions/checkout@v4

                        - name: Setup Python
                            uses: actions/setup-python@v4
                            with:
                                python-version: '3.11'

                        - name: Install generator dependencies
                            run: |
                                pip install --upgrade pip
                                pip install jinja2

                        - name: Download spec coverage report
                            uses: actions/download-artifact@v3
                            with:
                                name: spec-coverage-report
                                path: reports

                        - name: Run hardened generator
                            run: |
                                mkdir -p generated
                                python scripts/generate_from_spec.py --out generated || true

                        - name: Record generated files
                            run: |
                                python - <<'PY'
            import json, os
            files = []
            for root,_,fnames in os.walk('generated'):
                    for f in fnames:
                            path = os.path.join(root, f)
                            files.append(os.path.relpath(path, 'generated'))
            os.makedirs('reports', exist_ok=True)
            with open('reports/generated_files.json','w') as fh:
                    json.dump({'generated_files': files}, fh, indent=2)
            print('Wrote reports/generated_files.json')
            PY

                        - name: Run resource estimator
                            run: |
                                mkdir -p reports
                                # resource_estimator.py should write reports/resource-estimates.json; fall back to running and capturing stdout
                                if python scripts/resource_estimator.py --out reports/resource-estimates.json; then
                                    echo 'resource-estimates written'
                                else
                                    echo '{"warning":"resource estimator failed"}' > reports/resource-estimates.json || true
                                fi

                        - name: Upload generation reports and artifacts
                            uses: actions/upload-artifact@v3
                            with:
                                name: generation-reports
                                path: |
                                    reports/
                                    generated/

                        - name: Trigger Audit Trail (repository dispatch)
                            env:
                                GITHUB_TOKEN: ${{ secrets.ORG_GH_TOKEN }}
                            run: |
                                curl -s -X POST \
                                    -H "Accept: application/vnd.github+json" \
                                    -H "Authorization: token $GITHUB_TOKEN" \
                                    https://api.github.com/repos/${{ github.repository }}/dispatches \
                                    -d '{"event_type":"generation-complete","client_payload":{"sha":"'"${{ github.sha }}"'","branch":"auto/spec-implementation"}}' || true

                        - name: Commit generated code and open PR
                            uses: peter-evans/create-pull-request@v5
                            env:
                                GITHUB_TOKEN: ${{ secrets.ORG_GH_TOKEN }}
                            with:
                                title: 'ðŸ¤– Auto-generated code from specifications'
                                body: |
                                    This PR contains auto-generated code from BDD specifications:
                                    - Core domain services
                                    - HTTP adapters
                                    - Unit tests
                                    - Integration tests
                                    - Living documentation

                                    Reports and generation metadata are attached as artifacts to the generator run.
                                branch: auto/spec-implementation
                                base: main
                                delete-branch: true
                                labels: generated,auto